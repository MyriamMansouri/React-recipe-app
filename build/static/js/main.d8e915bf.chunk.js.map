{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipes","recipes","map","recipe","key","recipe_id","src","image_url","alt","title","length","concat","substring","publisher","react_router_dom","to","pathname","state","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","recipeName","apiCall","wrap","_context","prev","next","target","elements","value","preventDefault","process","axios","sent","setState","data","stop","_x","apply","arguments","componentDidMount","json","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","components_Form","components_Recipes","Component","Recipe","activeRecipe","req","location","href","publisher_url","React","Router","react_router","path","component","exact","Boolean","window","hostname","match","require","config","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8e915bf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => ( \r\n<form onSubmit={ props.getRecipe } style={{ marginBottom:\"2rem\"}}>\r\n        <input className=\"form__input\" type=\"text\" name=\"recipeName\"/>\r\n        <button className=\"form__button\">Search</button>\r\n    </form>\r\n   )\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Recipes = (props) => (       \r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        {!props.recipes ? null : props.recipes.map(recipe => {\r\n          return (\r\n            <div className=\"col-md-4\" key={recipe.recipe_id} style={{ marginBottom: \"2rem\" }}>\r\n              <div className=\"recipes__box\" >\r\n                <img\r\n                  className=\"recipe__box-img\"\r\n                  src={recipe.image_url}\r\n                  alt={recipe.title} />\r\n                <div className=\"recipe__text\">\r\n                  <h5 className=\"recipes__title\">{recipe.title.length < 20 ? `${recipe.title}` : `${\r\n                    recipe.title.substring(0, 25)}...`}\r\n                  </h5>\r\n                  <p className=\"recipes__subtitle\">Publisher: <span>{recipe.publisher}\r\n                  </span></p>\r\n                </div>\r\n                <button className=\"recipe_buttons\">\r\n                  <Link to={{\r\n                    pathname: `/recipe/${recipe.recipe_id}`,\r\n                    state: { recipe: recipe.title }\r\n                  }}>View Recipe</Link>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n\r\n\r\n    </div>\r\n  \r\n)\r\n\r\n\r\n\r\nexport default Recipes;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n\nimport Form from \"./components/Form\";\nimport Recipes from \"./components/Recipes\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes: []\n    }\n  }\n  getRecipe = async (e) => {\n    const recipeName = e.target.elements.recipeName.value;\n    //prevents default behaviour that is web page going to refresh\n    e.preventDefault();\n    const apiKey = process.env.REACT_APP_API_KEY\n\n    const apiCall = await axios(`https://www.food2fork.com/api/search?key=${apiKey}&q=${recipeName}&count=20`)\n    this.setState({ recipes: apiCall.data.recipes })\n  }\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(json)\n    this.setState({ recipes })\n  }\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes)\n    localStorage.setItem(\"recipes\", recipes);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe Search</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","import React from 'react'\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Recipe extends React.Component {\r\n    state = {\r\n        activeRecipe: []\r\n    }\r\n    componentDidMount = async () => {\r\n        const title = this.props.location.state.recipe;\r\n        const apiKey = process.env.REACT_APP_API_KEY\r\n        const req = await axios(`https://www.food2fork.com/api/search?key=${apiKey}&q=${title}`)\r\n        this.setState({ activeRecipe: req.data.recipes[0] })\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const recipe = this.state.activeRecipe;\r\n        return (\r\n            <div className=\"container\">\r\n                {recipe.length !== 0 &&\r\n                    <div className=\"active-recipe\">\r\n                        <img className=\"active-recipe__img\" src={recipe.image_url} alt={recipe.title} />\r\n                        <h3 className=\"active-recipe__title\">{recipe.title}</h3>\r\n                        <h4 className=\"active-recipe__publisher\">\r\n                            Publisher: <span>{recipe.publisher}</span>\r\n                        </h4>\r\n                        <p className=\"active-recipe__website\">\r\n                            Website:<span><a href={recipe.publisher_url}>{recipe.publisher_url}</a></span>\r\n                        </p>\r\n                        <button className=\"active-recipe__button\">\r\n                            <Link to=\"/\">Go home</Link>\r\n                        </button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Recipe","import React from 'react'\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\" \r\nimport App from \"../App\"\r\nimport Recipe from \"./Recipe\"\r\n\r\nconst Router = () => (\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route path=\"/\" component={App} exact />\r\n            <Route path=\"/recipe/:id\" component={Recipe} />\r\n        </Switch>\r\n    </BrowserRouter>\r\n)\r\n\r\nexport default Router","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Router from '././components/Router';\n\nimport * as serviceWorker from './serviceWorker';\n\nrequire('dotenv').config()\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}